/**
 * MonitorSaude - Monitora a sa√∫de do sistema
 * 
 * Este m√≥dulo centraliza monitoramento de conex√£o, mem√≥ria, CPU 
 * e outros recursos para garantir um sistema est√°vel.
 */

const fs = require('fs');

class MonitorSaude {
  /**
   * Cria uma inst√¢ncia do monitor de sa√∫de
   * @param {Object} registrador - Objeto logger para registro de eventos
   * @param {Object} clienteWhatsApp - Inst√¢ncia do cliente WhatsApp
   * @param {Object} opcoes - Op√ß√µes de configura√ß√£o
   */
  constructor(registrador, clienteWhatsApp, opcoes = {}) {
    this.registrador = registrador;
    this.clienteWhatsApp = clienteWhatsApp;
    this.intervalos = {
      batimento: null,
      memoria: null,
      verificacaoConexao: null
    };
    
    this.configurarOpcoes(opcoes);
    this.ultimoBatimento = Date.now();
    this.inicioSistema = Date.now();
    this.contadorBatimentos = 0;
    this.falhasConsecutivas = 0;
    
    this.registrador.info('Monitor de sa√∫de inicializado');
  }

  /**
   * Configura op√ß√µes do monitor
   * @param {Object} opcoes - Op√ß√µes de configura√ß√£o
   */
  configurarOpcoes(opcoes) {
    this.opcoes = {
      intervaloBatimento: opcoes.intervaloBatimento || 20000, // 20 segundos
      intervaloMemoria: opcoes.intervaloMemoria || 300000, // 5 minutos
      intervaloVerificacaoConexao: opcoes.intervaloVerificacaoConexao || 60000, // 1 minuto
      limiteAlertaMemoria: opcoes.limiteAlertaMemoria || 1024, // 1GB
      limiteCriticoMemoria: opcoes.limiteCriticoMemoria || 1536, // 1.5GB
      limiteReconexoes: opcoes.limiteReconexoes || 5
    };
  }

  /**
   * Inicia todos os monitores
   */
  iniciar() {
    this.iniciarMonitorBatimento();
    this.iniciarMonitorMemoria();
    this.iniciarVerificacaoConexao();
    this.registrador.info('Monitores de sa√∫de iniciados');
  }

  /**
   * Para todos os monitores
   */
  parar() {
    Object.values(this.intervalos).forEach(intervalo => {
      if (intervalo) clearInterval(intervalo);
    });
    
    this.intervalos = {
      batimento: null,
      memoria: null,
      verificacaoConexao: null
    };
    
    this.registrador.info('Monitores de sa√∫de parados');
  }

  /**
   * Inicia o monitor de batimentos card√≠acos
   */
  iniciarMonitorBatimento() {
    if (this.intervalos.batimento) {
      clearInterval(this.intervalos.batimento);
    }
    
    this.intervalos.batimento = setInterval(() => {
      this.emitirBatimento();
    }, this.opcoes.intervaloBatimento);
    
    // Primeiro batimento imediato
    this.emitirBatimento();
    this.registrador.info('Monitor de batimentos iniciado');
  }

  /**
   * Inicia o monitor de mem√≥ria
   */
  iniciarMonitorMemoria() {
    if (this.intervalos.memoria) {
      clearInterval(this.intervalos.memoria);
    }
    
    this.intervalos.memoria = setInterval(() => {
      this.verificarMemoria();
    }, this.opcoes.intervaloMemoria);
    
    // Primeira verifica√ß√£o imediata
    this.verificarMemoria();
    this.registrador.info('Monitor de mem√≥ria iniciado');
  }

  /**
   * Inicia a verifica√ß√£o peri√≥dica de conex√£o
   */
  iniciarVerificacaoConexao() {
    if (this.intervalos.verificacaoConexao) {
      clearInterval(this.intervalos.verificacaoConexao);
    }
    
    this.intervalos.verificacaoConexao = setInterval(() => {
      this.verificarConexao();
    }, this.opcoes.intervaloVerificacaoConexao);
    
    // Primeira verifica√ß√£o imediata
    this.verificarConexao();
    this.registrador.info('Verifica√ß√£o de conex√£o iniciada');
  }

  /**
   * Verifica se o cliente do WhatsApp est√° realmente conectado
   * @returns {Promise<boolean>} Verdadeiro se o cliente estiver conectado
   */
  async verificarConexaoAtiva() {
    try {
      // Verifica√ß√£o b√°sica da exist√™ncia do cliente
      if (!this.clienteWhatsApp || !this.clienteWhatsApp.cliente || !this.clienteWhatsApp.cliente.info) {
        return false;
      }
      
      // Se o cliente tem um ID (wid), isso j√° √© um bom indicador
      const temId = Boolean(this.clienteWhatsApp.cliente.info.wid);
      
      // Verifica√ß√£o de capacidade de resposta
      let estadoConexao = false;
      
      // Verificar se temos um pupPage e se podemos acess√°-lo
      if (this.clienteWhatsApp.cliente.pupPage) {
        try {
          // Verificar o estado de conex√£o interno
          estadoConexao = await this.clienteWhatsApp.cliente.pupPage.evaluate(() => {
            // Verifica√ß√£o mais flex√≠vel - qualquer um destes √© um bom sinal
            return Boolean(
              (window.Store && window.Store.Conn) || 
              (window.WAPI && window.WAPI.isConnected()) || 
              (window.WWebJS && window.WWebJS.isConnected) ||
              document.querySelector('[data-icon=":"]') !== null // √çcone de conex√£o online
            );
          }).catch(() => false);
        } catch (erroEval) {
          // Erro na avalia√ß√£o n√£o √© conclusivo - vamos verificar outros indicadores
          this.registrador.debug(`Erro na verifica√ß√£o do Puppeteer: ${erroEval.message}`);
        }
      }
      
      // Se alguma mensagem foi processada recentemente (√∫ltimos 2 minutos), consideramos como conectado
      const mensagemRecente = this.verificarMensagensRecentes();

      // Se o cliente tem ID e (estado da conex√£o √© positivo OU teve mensagem recente), consideramos conectado
      const estaConectado = temId && (estadoConexao || mensagemRecente);
      
      if (!estaConectado) {
        this.registrador.debug(`Diagn√≥stico de conex√£o: ID=${temId}, Estado=${estadoConexao}, MensagemRecente=${mensagemRecente}`);
      }
      
      return estaConectado;
    } catch (erro) {
      this.registrador.error(`Erro ao verificar estado da conex√£o: ${erro.message}`);
      return false;
    }
  }

/**
 * Verifica se houve mensagens processadas recentemente
 * @returns {boolean} Verdadeiro se mensagens foram processadas nos √∫ltimos minutos
 */
verificarMensagensRecentes() {
  try {
    // Verificar os logs mais recentes em busca de atividade de mensagens
    const caminhoLog = './logs/bot.log';
    
    // Verificar se o arquivo existe
    if (!fs.existsSync(caminhoLog)) {
      this.registrador.debug(`Arquivo de log ${caminhoLog} n√£o encontrado`);
      return false;
    }
    
    // Ler apenas as √∫ltimas linhas do arquivo para n√£o sobrecarregar a mem√≥ria
    let conteudoLog;
    try {
      // Ler apenas os √∫ltimos 50KB do arquivo
      const stats = fs.statSync(caminhoLog);
      const tamanhoLeitura = Math.min(stats.size, 50 * 1024); // 50KB m√°ximo
      const buffer = Buffer.alloc(tamanhoLeitura);
      
      const fd = fs.openSync(caminhoLog, 'r');
      fs.readSync(fd, buffer, 0, tamanhoLeitura, stats.size - tamanhoLeitura);
      fs.closeSync(fd);
      
      conteudoLog = buffer.toString();
    } catch (erroLeitura) {
      this.registrador.error(`Erro ao ler arquivo de log: ${erroLeitura.message}`);
      return false;
    }
    
    const linhasRecentes = conteudoLog.split('\n').slice(-100); // √öltimas 100 linhas
    
    // Data atual
    const agora = new Date();
    const doisMinutosAtras = new Date(agora.getTime() - 2 * 60 * 1000);
    
    // Padr√µes que indicam atividade real de mensagens
    const padroesAtividade = [
      'Mensagem de ',
      'Resposta:',
      'processando m√≠dia'
    ];
    
    // Procurar nas linhas recentes por atividade dentro da janela de tempo
    for (const linha of linhasRecentes) {
      // Verificar se √© uma linha de atividade
      if (!padroesAtividade.some(padrao => linha.includes(padrao))) continue;
      
      // Extrair timestamp
      const timestampMatch = linha.match(/\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}:\d{2}/);
      if (!timestampMatch) continue;
      
      try {
        // Converter para data
        const dataLinha = new Date(timestampMatch[0]);
        
        // Se a linha √© recente, consideramos como ativo
        if (dataLinha >= doisMinutosAtras) {
          return true;
        }
      } catch (erroData) {
        this.registrador.debug(`Erro ao processar data na linha: ${erroData.message}`);
        // Continuar para pr√≥xima linha
      }
    }
    
    return false;
  } catch (erro) {
    this.registrador.error(`Erro ao verificar mensagens recentes: ${erro.message}`);
    return false;
  }
}

  /**
   * Registra um batimento card√≠aco apenas se a conex√£o estiver ativa
   */
  async emitirBatimento() {
    const agora = Date.now();
    const intervaloReal = agora - this.ultimoBatimento;
    this.ultimoBatimento = agora;
    
    // Verificar se a conex√£o com o WhatsApp est√° ativa
    const conexaoAtiva = await this.verificarConexaoAtiva();
    
    // Se a conex√£o n√£o estiver ativa, registrar o problema e n√£o emitir batimento
    if (!conexaoAtiva) {
      this.registrador.warn('‚ùå Conex√£o WhatsApp inativa - batimento n√£o emitido');
      return;
    }
    
    this.contadorBatimentos++;
    
    // A cada 10 batimentos, mostra estat√≠sticas
    if (this.contadorBatimentos % 10 === 0) {
      const segundosAtivo = Math.floor((agora - this.inicioSistema) / 1000);
      this.registrador.info(`üíì Batimento #${this.contadorBatimentos} - Sistema ativo h√° ${segundosAtivo}s`);
    } else {
      this.registrador.info(`Batimento ${new Date().toISOString()} - Sistema ativo`);
    }
    
    // Verificar uso de mem√≥ria ocasionalmente
    if (this.contadorBatimentos % 5 === 0) {
      this.verificarMemoria();
    }
  }

  /**
   * Verifica uso de mem√≥ria e libera se necess√°rio
   */
  verificarMemoria() {
    try {
      const usoMemoria = process.memoryUsage();
      const heapUsadoMB = Math.round(usoMemoria.heapUsed / 1024 / 1024);
      const rssMB = Math.round(usoMemoria.rss / 1024 / 1024);
      
      this.registrador.debug(`Mem√≥ria: Heap ${heapUsadoMB}MB / RSS ${rssMB}MB`);
      
      // Se estiver usando muita mem√≥ria (n√≠vel de alerta)
      if (heapUsadoMB > this.opcoes.limiteAlertaMemoria || rssMB > this.opcoes.limiteAlertaMemoria) {
        this.registrador.warn(`‚ö†Ô∏è Alto uso de mem√≥ria detectado: Heap ${heapUsadoMB}MB / RSS ${rssMB}MB`);
        
        // Sugerir coleta de lixo se dispon√≠vel
        if (global.gc) {
          this.registrador.info('Solicitando coleta de lixo...');
          global.gc();
        }
      }
      
      // Se estiver usando mem√≥ria cr√≠tica
      if (heapUsadoMB > this.opcoes.limiteCriticoMemoria || rssMB > this.opcoes.limiteCriticoMemoria) {
        this.registrador.error(`‚ö†Ô∏è ALERTA CR√çTICO: Uso de mem√≥ria excedeu limite cr√≠tico! RSS: ${rssMB}MB, Heap: ${heapUsadoMB}MB`);
        this.acaoMemoriaCritica();
      }
    } catch (erro) {
      this.registrador.error(`Erro ao verificar mem√≥ria: ${erro.message}`);
    }
  }

  /**
   * A√ß√£o a ser tomada quando mem√≥ria atingir n√≠vel cr√≠tico
   */
  acaoMemoriaCritica() {
    try {
      this.registrador.warn('Executando a√ß√µes para reduzir uso de mem√≥ria cr√≠tico');
      
      // For√ßar coleta de lixo
      if (global.gc) {
        global.gc();
      }
      
      // Reiniciar cliente se necess√°rio
      this.agendarReinicioCliente();
    } catch (erro) {
      this.registrador.error(`Erro na a√ß√£o de mem√≥ria cr√≠tica: ${erro.message}`);
    }
  }

  /**
   * Agenda um rein√≠cio do cliente em 10 segundos
   */
  agendarReinicioCliente() {
    this.registrador.warn('Agendando rein√≠cio do cliente devido a uso cr√≠tico de recursos');
    
    setTimeout(async () => {
      try {
        this.registrador.warn('Executando rein√≠cio agendado do cliente WhatsApp');
        await this.clienteWhatsApp.reiniciarCompleto();
      } catch (erro) {
        this.registrador.error(`Erro ao reiniciar cliente: ${erro.message}`);
      }
    }, 10000); // 10 segundos
  }

  /**
   * Verifica a conex√£o e tenta reconectar se necess√°rio
   */
  async verificarConexao() {
    try {
      const conexaoAtiva = await this.verificarConexaoAtiva();
      
      if (!conexaoAtiva) {
        this.falhasConsecutivas++;
        this.registrador.warn(`Conex√£o inativa detectada (falha ${this.falhasConsecutivas}/${this.opcoes.limiteReconexoes})`);
        
        if (this.falhasConsecutivas >= this.opcoes.limiteReconexoes) {
          this.registrador.error(`Muitas falhas consecutivas. Iniciando rein√≠cio completo do cliente.`);
          await this.clienteWhatsApp.reiniciarCompleto();
          this.falhasConsecutivas = 0;
        } else {
          this.registrador.warn(`Tentando reconex√£o simples...`);
          const reconectou = await this.clienteWhatsApp.reconectar();
          
          if (reconectou) {
            this.registrador.info(`Reconex√£o bem-sucedida!`);
            this.falhasConsecutivas = 0;
          }
        }
      } else {
        // Reset do contador de falhas se estiver tudo bem
        if (this.falhasConsecutivas > 0) {
          this.registrador.info(`Conex√£o normalizada ap√≥s ${this.falhasConsecutivas} falhas`);
          this.falhasConsecutivas = 0;
        }
      }
    } catch (erro) {
      this.registrador.error(`Erro na verifica√ß√£o de conex√£o: ${erro.message}`);
    }
  }
}

module.exports = MonitorSaude;