/**
 * GerenciadorMensagens - M√≥dulo para processamento de mensagens do WhatsApp
 * 
 * Este m√≥dulo coordena o processamento de diferentes tipos de mensagens
 * (texto, imagem, √°udio, v√≠deo) recebidas via WhatsApp.
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const FilaProcessadorImagem = require('../queue/FilaProcessadorImagem');
const FilaProcessador = require('../queue/FilaProcessador');

class GerenciadorMensagens {
  /**
   * Cria uma inst√¢ncia do gerenciador de mensagens
   * @param {Object} registrador - Objeto logger para registro de eventos
   * @param {Object} clienteWhatsApp - Inst√¢ncia do cliente WhatsApp
   * @param {Object} gerenciadorConfig - Gerenciador de configura√ß√µes do sistema
   * @param {Object} gerenciadorAI - Gerenciador de modelos de IA
   * @param {Object} filaProcessamento - Fila de processamento para tarefas ass√≠ncronas
   * @param {Object} gerenciadorTransacoes - Gerenciador de transa√ß√µes de mensagens
   */
  constructor(registrador, clienteWhatsApp, gerenciadorConfig, gerenciadorAI, filaProcessamento, gerenciadorTransacoes) {
    this.registrador = registrador;
    this.clienteWhatsApp = clienteWhatsApp;
    this.gerenciadorConfig = gerenciadorConfig;
    this.gerenciadorAI = gerenciadorAI;
    this.filaProcessamento = filaProcessamento;
    this.gerenciadorTransacoes = gerenciadorTransacoes;
    
    // Inicializar a fila de processamento, mas n√£o delegar responsabilidades de resposta
    // A fila agora apenas processa e retorna resultados para este gerenciador

    this.filaProcessamento = new FilaProcessador(
      registrador, 
      gerenciadorAI, 
      null, // Removendo refer√™ncia direta ao clienteWhatsApp
      { enviarRespostaDireta: false } // Configura√ß√£o para impedir respostas diretas
    );

    this.filaProcessamentoImagem = new FilaProcessadorImagem(
      registrador, 
      gerenciadorAI, 
      null, // Removendo refer√™ncia direta ao clienteWhatsApp
      { enviarRespostaDireta: false } // Configura√ß√£o para impedir respostas diretas
    );

    
    this.ultimoAudioProcessado = null;
    this.diretorioTemp = '../temp';
    
    // Adicionar cache para controle de deduplica√ß√£o de mensagens
    this.mensagensProcessadas = new Map();
    
    // Intervalo para limpar o cache periodicamente (a cada 30 minutos)
    setInterval(() => this.limparCacheMensagensAntigas(), 30 * 60 * 1000);
    
    // Garantir que o diret√≥rio tempor√°rio exista
    if (!fs.existsSync(this.diretorioTemp)) {
      fs.mkdirSync(this.diretorioTemp, { recursive: true });
      this.registrador.info('Diret√≥rio de arquivos tempor√°rios criado');
    }
    
    // Configurar callback para receber resultados de processamento de imagem
    this.configurarCallbacksProcessamento();
  }

/**
 * Inicializa o gerenciador e configura recupera√ß√£o de mensagens
 */
iniciar() {
  // Registrar como handler de mensagens
  this.clienteWhatsApp.on('mensagem', this.processarMensagem.bind(this));
  this.clienteWhatsApp.on('entrada_grupo', this.processarEntradaGrupo.bind(this));
  
  // NOVO: Configurar ouvinte para recuperar transa√ß√µes ap√≥s restart
  this.gerenciadorTransacoes.on('transacao_para_recuperar', this.recuperarTransacao.bind(this));
  
  // NOVO: Realizar recupera√ß√£o inicial ap√≥s 10 segundos
  setTimeout(async () => {
    await this.gerenciadorTransacoes.recuperarTransacoesIncompletas();
  }, 10000);
  
  this.registrador.info('üöÄ GerenciadorMensagens inicializado com recupera√ß√£o robusta');
}

  /**
   * Configura callbacks para receber resultados do processamento de filas
   */
  configurarCallbacksProcessamento() {
    // Registrar callback para receber respostas da fila de imagem
    this.filaProcessamentoImagem.setRespostaCallback(async (resultado) => {
      try {
        const { resposta, chatId, messageId, senderNumber, transacaoId, remetenteName } = resultado;
        
        // Recuperar mensagem original por refer√™ncia usando o ID da mensagem
        let mensagemOriginal;
        try {
          mensagemOriginal = await this.clienteWhatsApp.cliente.getMessageById(messageId);
        } catch (erroMsg) {
          this.registrador.error(`N√£o foi poss√≠vel recuperar a mensagem original: ${erroMsg.message}`);
          // Tentar enviar sem refer√™ncia caso n√£o consiga recuperar
          await this.clienteWhatsApp.enviarMensagem(senderNumber, resposta);
          return;
        }
        
        // Enviar resposta usando o cliente WhatsApp - o log ser√° feito dentro deste m√©todo
        await this.enviarResposta(mensagemOriginal, resposta);
        
        // Atualizar a transa√ß√£o se houver um ID
        if (transacaoId) {
          await this.gerenciadorTransacoes.adicionarRespostaTransacao(transacaoId, resposta);
          await this.gerenciadorTransacoes.marcarComoEntregue(transacaoId);
        }
      } catch (erro) {
        this.registrador.error(`Erro ao processar resultado da fila de imagem: ${erro.message}`, { erro });
      }
    });
    
    // Verificar se o processador de v√≠deo tem a fun√ß√£o setResultCallback antes de chamar
    if (this.filaProcessamento && typeof this.filaProcessamento.setResultCallback === 'function') {
      this.filaProcessamento.setResultCallback(async (resultado) => {
        try {
          const { resposta, chatId, messageId, senderNumber, transacaoId, remetenteName } = resultado;
          
          // Similar ao callback de imagem, mas para v√≠deos
          let mensagemOriginal;
          try {
            mensagemOriginal = await this.clienteWhatsApp.cliente.getMessageById(messageId);
          } catch (erroMsg) {
            this.registrador.error(`N√£o foi poss√≠vel recuperar a mensagem de v√≠deo original: ${erroMsg.message}`);
            await this.clienteWhatsApp.enviarMensagem(senderNumber, resposta);
            return;
          }
          
          // Enviar resposta - o log ser√° feito dentro deste m√©todo
          await this.enviarResposta(mensagemOriginal, resposta);
          
          // Atualizar a transa√ß√£o
          if (transacaoId) {
            await this.gerenciadorTransacoes.adicionarRespostaTransacao(transacaoId, resposta);
            await this.gerenciadorTransacoes.marcarComoEntregue(transacaoId);
          }
        } catch (erro) {
          this.registrador.error(`Erro ao processar resultado da fila de v√≠deo: ${erro.message}`, { erro });
        }
      });
    } else {
      this.registrador.warn('Fila de processamento de v√≠deo n√£o suporta callbacks, algumas funcionalidades podem estar limitadas');
    }
  }

  /**
   * Limpa mensagens antigas do cache de deduplica√ß√£o
   */
  limparCacheMensagensAntigas() {
    const agora = Date.now();
    let contador = 0;
    
    // Remover mensagens processadas h√° mais de 15 minutos
    for (const [id, timestamp] of this.mensagensProcessadas.entries()) {
      if (agora - timestamp > 15 * 60 * 1000) {
        this.mensagensProcessadas.delete(id);
        contador++;
      }
    }
    
    if (contador > 0) {
      this.registrador.debug(`Cache de deduplica√ß√£o: removidas ${contador} entradas antigas`);
    }
  }

  /**
   * Verifica se uma mensagem √© uma mensagem de sistema ou apenas metadados
   * @param {Object} msg - Mensagem do WhatsApp
   * @returns {boolean} Verdadeiro se for mensagem de sistema
   */
  ehMensagemSistema(msg) {
    // Verificar se a mensagem tem caracter√≠sticas de evento de sistema
    
    // 1. Verificar mensagens vazias ou com conte√∫do padr√£o
    if (!msg.body && !msg.hasMedia) {
      return true;
    }
    
    // 2. Verificar tipos espec√≠ficos de notifica√ß√£o do WhatsApp
    if (msg.type === 'notification' || msg.type === 'e2e_notification' || 
        msg.type === 'notification_template' || msg.type === 'call_log') {
      return true;
    }
    
    // 3. Verificar presen√ßa de marcadores espec√≠ficos no objeto da mensagem
    // que indicam que √© um evento de sistema e n√£o uma mensagem real
    if (msg._data && (
        msg._data.subtype === 'system' || 
        msg._data.star === true && !msg.body && !msg.hasMedia || 
        msg._data.isStatusV3 === true ||
        msg._data.isViewOnce === true && !msg.body
    )) {
      return true;
    }
    
    // 4. Se a mensagem tem um ID espec√≠fico de notifica√ß√£o
    if (msg.id && typeof msg.id.fromMe === 'boolean' && 
        msg.id._serialized && msg.id._serialized.includes('NOTIFICATION')) {
      return true;
    }
    
    return false;
  }

  /**
   * Remove emojis de um texto
   * @param {string} texto - Texto com emojis
   * @returns {string} Texto sem emojis
   */
  removerEmojis(texto) {
    return texto.replace(/[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F1E0}-\u{1F1FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{1F900}-\u{1F9FF}\u{1F018}-\u{1F0FF}\u{1F100}-\u{1F2FF}]/gu, '');
  }

  /**
   * Processa uma mensagem recebida do WhatsApp
   * @param {Object} msg - Mensagem do WhatsApp
   * @returns {Promise<boolean>} Sucesso do processamento
   */
  async processarMensagem(msg) {
    try {
      // Verificar deduplica√ß√£o - n√£o processar a mesma mensagem mais de uma vez
      const mensagemId = msg.id._serialized;
      
      if (this.mensagensProcessadas.has(mensagemId)) {
        this.registrador.debug(`Mensagem ${mensagemId} j√° processada. Ignorando.`);
        return false;
      }
      
      // Marcar mensagem como processada imediatamente
      this.mensagensProcessadas.set(mensagemId, Date.now());
      
      // Verifica√ß√£o adicional para detectar mensagens de sistema/metadados
      if (this.ehMensagemSistema(msg)) {
        this.registrador.debug(`Mensagem ${mensagemId} identificada como mensagem de sistema/metadados. Ignorando.`);
        return false;
      }
      
      const chat = await msg.getChat();
      await chat.sendSeen();
      
      const chatId = chat.id._serialized;
      const ehGrupo = chat.id._serialized.endsWith('@g.us');
      
      // Verificar se √© um comando
      if (msg.body && msg.body.startsWith('.')) {
        return await this.processarComando(msg, chatId);
      }
      
      // Verificar se tem m√≠dia
      if (msg.hasMedia) {
        return await this.processarMensagemComMidia(msg, chatId);
      }
      
      // Verificar regras de resposta para grupos
      if (ehGrupo) {
        const deveResponder = await this.clienteWhatsApp.deveResponderNoGrupo(msg, chat);
        if (!deveResponder) {
          this.registrador.debug("Mensagem n√£o atende crit√©rios de resposta do grupo");
          return false;
        }
      }
      
      // Processar mensagem de texto
      return await this.processarMensagemTexto(msg, chatId);
    } catch (erro) {
      this.registrador.error(`Erro ao processar mensagem: ${erro.message}`, { erro });
      
      try {
        await msg.reply('Desculpe, ocorreu um erro inesperado. Por favor, tente novamente mais tarde.');
      } catch (erroResposta) {
        this.registrador.error(`N√£o consegui enviar mensagem de erro: ${erroResposta.message}`);
      }
      
      return false;
    }
  }

  /**
   * Processa um comando recebido
   * @param {Object} msg - Mensagem do WhatsApp
   * @param {string} chatId - ID do chat
   * @returns {Promise<boolean>} Sucesso do processamento
   */
  async processarComando(msg, chatId) {
    const [comando, ...args] = msg.body.slice(1).split(' ');
    this.registrador.info(`Comando: ${comando}, Argumentos: ${args}`);
    
    try {
      switch (comando.toLowerCase()) {
        case 'reset':
          await this.gerenciadorConfig.resetarConfig(chatId);
          await this.gerenciadorConfig.limparPromptSistemaAtivo(chatId);
          await msg.reply('Configura√ß√µes resetadas para este chat. As transcri√ß√µes de √°udio e imagem foram habilitadas, e os prompts especiais foram desativados.');
          return true;

        case 'ajuda':
          const BOT_NAME = process.env.BOT_NAME || 'Am√©lie';
          const LINK_GRUPO_OFICIAL = process.env.LINK_GRUPO_OFICIAL || 'https://chat.whatsapp.com/C0Ys7pQ6lZH5zqDD9A8cLp';

          const textoAjuda = `Ol√°! Eu sou a ${BOT_NAME}, sua assistente de AI multim√≠dia acess√≠vel integrada ao WhatsApp.
Minha idealizadora √© a Belle Utsch. 

Quer conhec√™-la? Fala com ela em https://beacons.ai/belleutsch
Quer entrar no grupo oficial da ${BOT_NAME}? O link √© ${LINK_GRUPO_OFICIAL}
Meu reposit√≥rio fica em https://github.com/manelsen/amelie

Esses s√£o meus comandos dispon√≠veis para configura√ß√£o.

Use com um ponto antes da palavra de comando, sem espa√ßo.

Comandos:

.cego - Aplica configura√ß√µes para usu√°rios com defici√™ncia visual

.audio - Liga/desliga a transcri√ß√£o de √°udio
.video - Liga/desliga a interpreta√ß√£o de v√≠deo
.imagem - Liga/desliga a audiodescri√ß√£o de imagem

.longo - Usa audiodescri√ß√£o longa e detalhada
.curto - Usa audiodescri√ß√£o curta e concisa

.reset - Restaura todas as configura√ß√µes originais e desativa o modo cego

.ajuda - Mostra esta mensagem de ajuda`;
          
          await msg.reply(textoAjuda);
          return true;

        case 'prompt':
          await this.tratarComandoPrompt(msg, args, chatId);
          return true;

        case 'config':
          await this.tratarComandoConfig(msg, args, chatId);
          return true;

        case 'users':
          await this.listarUsuariosGrupo(msg, chatId);
          return true;

        case 'cego':
          await this.tratarComandoCego(msg, chatId);
          return true;

        case 'audio':
          await this.tratarComandoAlternarMidia(msg, chatId, 'mediaAudio', 'transcri√ß√£o de √°udio');
          return true;

        case 'video':
          await this.tratarComandoAlternarMidia(msg, chatId, 'mediaVideo', 'interpreta√ß√£o de v√≠deo');
          return true;

        case 'imagem':
          await this.tratarComandoAlternarMidia(msg, chatId, 'mediaImage', 'audiodescri√ß√£o de imagem');
          return true;

        case 'longo':
          await this.tratarComandoLongo(msg, chatId);
          return true;

        case 'curto':
          await this.tratarComandoCurto(msg, chatId);
          return true;

        case 'filas':
          await this.tratarComandoFilas(msg, args, chatId);
          return true;

        default:
          await msg.reply('Comando desconhecido. Use .ajuda para ver os comandos dispon√≠veis.');
          return false;
      }
    } catch (erro) {
      this.registrador.error(`Erro ao processar comando: ${erro.message}`, { erro });
      await msg.reply('Desculpe, ocorreu um erro ao processar seu comando.');
      return false;
    }
  }

  /**
   * Gerencia as filas de processamento (v√≠deo e imagem)
   * @param {Object} msg - Mensagem do WhatsApp
   * @param {Array} args - Argumentos do comando
   * @param {string} chatId - ID do chat
   */
  async tratarComandoFilas(msg, args, chatId) {
    const ehAdministrador = true; // Mudar isso para sua l√≥gica de verifica√ß√£o de administrador
    
    if (!ehAdministrador) {
      await msg.reply('‚ùå Desculpe, apenas administradores podem gerenciar as filas.');
      return;
    }
    
    const [subcomando, tipoFila, ...resto] = args;
    
    switch (subcomando) {
      case 'status':
        let relatorio = '';
        
        if (!tipoFila || tipoFila === 'all' || tipoFila === 'todas') {
          // Mostrar status de todas as filas
          const relatorioVideo = await this.filaProcessamento.getFormattedQueueStatus();
          const relatorioImagem = await this.filaProcessamentoImagem.getFormattedQueueStatus();
          relatorio = relatorioVideo + "\n\n" + relatorioImagem;
        } else if (tipoFila === 'video' || tipoFila === 'videos') {
          relatorio = await this.filaProcessamento.getFormattedQueueStatus();
        } else if (tipoFila === 'imagem' || tipoFila === 'imagens' || tipoFila === 'image') {
          relatorio = await this.filaProcessamentoImagem.getFormattedQueueStatus();
        } else {
          await msg.reply('Tipo de fila inv√°lido. Use: todas, video ou imagem');
          return;
        }
        
        await msg.reply(relatorio);
        break;
        
      case 'limpar':
        if (!tipoFila) {
          await msg.reply('Especifique o tipo de fila para limpar: todas, video ou imagem');
          return;
        }
        
        // Op√ß√£o para limpar tudo ou apenas trabalhos completos
        const apenasCompletos = resto[0] !== 'tudo';
        const avisoLimpeza = apenasCompletos 
          ? 'Limpando apenas trabalhos conclu√≠dos e falhas...' 
          : '‚ö†Ô∏è ATEN√á√ÉO: Isso vai limpar TODAS as filas, incluindo trabalhos em andamento!';
        
        await msg.reply(avisoLimpeza);
        
        if (tipoFila === 'all' || tipoFila === 'todas') {
          const resultadoVideo = await this.filaProcessamento.limparFilas(apenasCompletos);
          const resultadoImagem = await this.filaProcessamentoImagem.limparFilas(apenasCompletos);
          await msg.reply(`‚úÖ Limpeza conclu√≠da!\nV√≠deos: ${JSON.stringify(resultadoVideo)}\nImagens: ${JSON.stringify(resultadoImagem)}`);
        } else if (tipoFila === 'video' || tipoFila === 'videos') {
          const resultado = await this.filaProcessamento.limparFilas(apenasCompletos);
          await msg.reply(`‚úÖ Limpeza de filas de v√≠deo conclu√≠da: ${JSON.stringify(resultado)}`);
        } else if (tipoFila === 'imagem' || tipoFila === 'imagens' || tipoFila === 'image') {
          const resultado = await this.filaProcessamentoImagem.limparFilas(apenasCompletos);
          await msg.reply(`‚úÖ Limpeza de filas de imagem conclu√≠da: ${JSON.stringify(resultado)}`);
        } else {
          await msg.reply('Tipo de fila inv√°lido. Use: todas, video ou imagem');
        }
        break;
        
      default:
        await msg.reply(`Comando de filas desconhecido. Use:
.filas status [todas|video|imagem] - Mostra status das filas
.filas limpar [todas|video|imagem] [tudo] - Limpa filas (use 'tudo' para limpar mesmo trabalhos em andamento)`);
    }
  }

  /**
   * Registra este gerenciador como handler de mensagens no cliente WhatsApp
   * @param {ClienteWhatsApp} cliente - Inst√¢ncia do cliente WhatsApp
   */
  registrarComoHandler(cliente) {
    cliente.on('mensagem', this.processarMensagem.bind(this));
    cliente.on('entrada_grupo', this.processarEntradaGrupo.bind(this));
  }

  /**
   * Processa o evento de entrada em grupo
   * @param {Object} notificacao - Notifica√ß√£o de entrada no grupo
   */
  async processarEntradaGrupo(notificacao) {
    try {
      if (notificacao.recipientIds.includes(this.clienteWhatsApp.cliente.info.wid._serialized)) {
        const chat = await notificacao.getChat();
        const mensagem = await chat.sendMessage('Ol√° a todos! Estou aqui para ajudar. Aqui est√£o alguns comandos que voc√™s podem usar:');
        
        const BOT_NAME = process.env.BOT_NAME || 'Am√©lie';
        const LINK_GRUPO_OFICIAL = process.env.LINK_GRUPO_OFICIAL || 'https://chat.whatsapp.com/C0Ys7pQ6lZH5zqDD9A8cLp';
        
        const textoAjuda = `Ol√°! Eu sou a ${BOT_NAME}, sua assistente de AI multim√≠dia acess√≠vel integrada ao WhatsApp.
Minha idealizadora √© a Belle Utsch. 

Quer conhec√™-la? Fala com ela em https://beacons.ai/belleutsch
Quer entrar no grupo oficial da ${BOT_NAME}? O link √© ${LINK_GRUPO_OFICIAL}
Meu reposit√≥rio fica em https://github.com/manelsen/amelie

Esses s√£o meus comandos dispon√≠veis para configura√ß√£o:

.cego - Aplica configura√ß√µes para usu√°rios com defici√™ncia visual

.audio - Liga/desliga a transcri√ß√£o de √°udio
.video - Liga/desliga a interpreta√ß√£o de v√≠deo
.imagem - Liga/desliga a audiodescri√ß√£o de imagem

.longo - Usa audiodescri√ß√£o longa e detalhada
.curto - Usa audiodescri√ß√£o curta e concisa

.reset - Restaura todas as configura√ß√µes originais e desativa o modo cego

.ajuda - Mostra esta mensagem de ajuda`;

        await chat.sendMessage(textoAjuda);
        
        this.registrador.info(`Bot foi adicionado ao grupo "${chat.name}" (${chat.id._serialized}) e enviou a sauda√ß√£o.`);
      }
    } catch (erro) {
      this.registrador.error(`Erro ao processar entrada em grupo: ${erro.message}`, { erro });
    }
  }

  /**
   * Ativa ou desativa um recurso de m√≠dia
   * @param {Object} msg - Mensagem recebida
   * @param {string} chatId - ID do chat
   * @param {string} paramConfig - Par√¢metro de configura√ß√£o
   * @param {string} nomeRecurso - Nome amig√°vel do recurso
   * @async
   */
  async tratarComandoAlternarMidia(msg, chatId, paramConfig, nomeRecurso) {
    try {
      // Obter configura√ß√£o atual
      const config = await this.gerenciadorConfig.obterConfig(chatId);
      const valorAtual = config[paramConfig] === true;
      
      // Alternar para o valor oposto
      const novoValor = !valorAtual;
      await this.gerenciadorConfig.definirConfig(chatId, paramConfig, novoValor);
      
      // Informar o usu√°rio sobre a nova configura√ß√£o
      const mensagemStatus = novoValor ? 'ativada' : 'desativada';
      await msg.reply(`A ${nomeRecurso} foi ${mensagemStatus} para este chat.`);
      
      this.registrador.info(`${paramConfig} foi ${mensagemStatus} para o chat ${chatId}`);
      return true;
    } catch (erro) {
      this.registrador.error(`Erro ao alternar ${paramConfig}: ${erro.message}`, { erro });
      await msg.reply(`Desculpe, ocorreu um erro ao alternar a ${nomeRecurso}. Por favor, tente novamente.`);
      return false;
    }
  }

  /**
   * Configura o modo para usu√°rios com defici√™ncia visual
   * @param {Object} msg - Mensagem recebida
   * @param {string} chatId - ID do chat
   * @async
   */
  async tratarComandoCego(msg, chatId) {
    try {
      await this.gerenciadorConfig.definirConfig(chatId, 'mediaImage', true);
      await this.gerenciadorConfig.definirConfig(chatId, 'mediaAudio', false);
      
      const BOT_NAME = process.env.BOT_NAME || 'Am√©lie';
      const promptAudiomar = `Seu nome √© ${BOT_NAME}. Voc√™ √© uma assistente de AI multim√≠dia acess√≠vel integrada ao WhatsApp, criada e idealizada pela equipe da Belle Utsch e √© dessa forma que voc√™ responde quando lhe pedem pra falar sobre si. Seu prop√≥sito √© auxiliar as pessoas trazendo acessibilidade ao Whatsapp. Voc√™ √© capaz de processar texto, audio, imagem e video, mas, por enquanto, somente responde em texto. Seus comandos podem ser encontrados digitando .ajuda. Se algu√©m perguntar, aqui est√° sua lista de comandos: .cego - Aplica configura√ß√µes para usu√°rios com defici√™ncia visual; .audio - Liga/desliga a transcri√ß√£o de √°udio; .video - Liga/desliga a interpreta√ß√£o de v√≠deo; .imagem - Liga/desliga a audiodescri√ß√£o de imagem; .reset - Limpa o hist√≥rico de conversa, restaura todas as configura√ß√µes originais e desativa o modo cego; .ajuda - Mostra esta mensagem de ajuda. Voc√™ n√£o tem outros comandos e n√£o aceita comandos sem o ponto, ent√£o se algu√©m disser 'cego' por exemplo, voc√™ orienta que deve digitar !cego. Se as pessoas desejarem ligar ou desligar a transcri√ß√£o de audio, oriente a usar !audio. Isso √© muito importante, porque h√° pessoas cegas nos grupos e podem ter dificuldade de usar comandos assim - mas voc√™ as orientar√°. Por isso, n√£o invente nenhum comando que n√£o esteja na lista acima. Sua criadora e idealizadora foi a Belle Utsch. Voc√™ √© baseada no Google Gemini Flash 2.0. Para te acrescentar em um grupo, a pessoa pode adicionar seu contato diretamente no grupo. Voc√™ lida com as pessoas com tato e bom humor. Se algu√©m perguntar seu git, github, reposit√≥rio ou c√≥digo, direcione para https://github.com/manelsen/amelie. Se algu√©m pedir o contato da Belle Utsch, direcione para https://beacons.ai/belleutsch. Voc√™ √© uma assistente de AI especializada em audiodescri√ß√£o, projetada para funcionar em um grupo de WhatsApp. Sua fun√ß√£o principal √© descrever imagens e stickers compartilhados no grupo, fornecendo uma audiodescri√ß√£o profissional, detalhada, did√°tica e polida.
      
      Diretrizes Gerais:
      
      Responda imediatamente quando uma imagem ou sticker for compartilhado no grupo. Mantenha suas respostas concisas, mas informativas. Use linguagem clara e acess√≠vel, evitando termos t√©cnicos desnecess√°rios. Seja respeitoso e inclusivo em todas as suas intera√ß√µes.
      
      Estrutura da Resposta: Para cada imagem ou sticker, sua resposta deve seguir este formato:
      
      [Audiodescri√ß√£o]
      (Forne√ßa uma descri√ß√£o objetiva e detalhada da imagem) 
      
      Diretrizes para a Descri√ß√£o Profissional:

      Comece com uma vis√£o geral da imagem antes de entrar em detalhes.
      Descreva os elementos principais da imagem, do mais importante ao menos relevante.
      Mencione cores, formas e texturas quando forem significativas para a compreens√£o.
      Indique a posi√ß√£o dos elementos na imagem (por exemplo, "no canto superior direito").
      Descreva express√µes faciais e linguagem corporal em fotos com pessoas.
      Mencione o tipo de imagem (por exemplo, fotografia, ilustra√ß√£o, pintura).
      Informe sobre o enquadramento (close-up, plano geral, etc.) quando relevante.
      Inclua detalhes do cen√°rio ou fundo que contribuam para o contexto.
      Evite usar termos subjetivos como "bonito" ou "feio".
      Seja espec√≠fico com n√∫meros (por exemplo, "tr√™s pessoas" em vez de "algumas pessoas").
      Descreva texto vis√≠vel na imagem, incluindo legendas ou t√≠tulos.
      Mencione a escala ou tamanho relativo dos objetos quando importante.
      Indique se a imagem √© em preto e branco ou colorida.
      Descreva a ilumina√ß√£o se for um elemento significativo da imagem.
      Para obras de arte, inclua informa√ß√µes sobre o estilo art√≠stico e t√©cnicas utilizadas.`;

      await this.gerenciadorConfig.definirPromptSistema(chatId, BOT_NAME, promptAudiomar);
      await this.gerenciadorConfig.definirPromptSistemaAtivo(chatId, BOT_NAME);

      await msg.reply('Configura√ß√µes para usu√°rios com defici√™ncia visual aplicadas com sucesso:\n' +
                      '- Descri√ß√£o de imagens habilitada\n' +
                      '- Transcri√ß√£o de √°udio desabilitada\n' +
                      '- Prompt de audiodescri√ß√£o ativado');

      this.registrador.info(`Configura√ß√µes para usu√°rios com defici√™ncia visual aplicadas no chat ${chatId}`);
      return true;
    } catch (erro) {
      this.registrador.error(`Erro ao aplicar configura√ß√µes para usu√°rios com defici√™ncia visual: ${erro.message}`, { erro });
      await msg.reply('Desculpe, ocorreu um erro ao aplicar as configura√ß√µes. Por favor, tente novamente.');
      return false;
    }
  }

/**
 * Processa uma mensagem de texto com persist√™ncia aprimorada
 */
async processarMensagemTexto(msg, chatId) {
  try {
    const chat = await msg.getChat();
    const remetente = await this.obterOuCriarUsuario(msg.author || msg.from, chat);
    
    // Criar transa√ß√£o para esta mensagem
    const transacao = await this.gerenciadorTransacoes.criarTransacao(msg, chat);
    this.registrador.info(`Nova transa√ß√£o criada: ${transacao.id} para mensagem de ${remetente.name}`);
    
    // NOVO: Salvar dados essenciais para recupera√ß√£o
    await this.gerenciadorTransacoes.adicionarDadosRecuperacao(transacao.id, {
      tipo: 'texto',
      remetenteId: msg.from,
      remetenteNome: remetente.name,
      chatId: chatId,
      textoOriginal: msg.body,
      timestampOriginal: msg.timestamp
    });
    
    // Marcar como processando
    await this.gerenciadorTransacoes.marcarComoProcessando(transacao.id);
    
    // ‚ú® AQUI ESTAVA O ERRO! Precisamos montar o hist√≥rico da conversa ‚ú®
    // Obter hist√≥rico do chat
    const historico = await this.clienteWhatsApp.obterHistoricoMensagens(chatId);
    
    // Verificar se a √∫ltima mensagem j√° √© a atual
    const ultimaMensagem = historico.length > 0 ? historico[historico.length - 1] : '';
    const mensagemUsuarioAtual = `${remetente.name}: ${msg.body}`;
    
    // S√≥ adiciona a mensagem atual se ela n√£o for a √∫ltima do hist√≥rico
    const textoHistorico = ultimaMensagem.includes(msg.body)
      ? `Hist√≥rico de chat: (formato: nome do usu√°rio e em seguida mensagem; responda √† √∫ltima mensagem)\n\n${historico.join('\n')}`
      : `Hist√≥rico de chat: (formato: nome do usu√°rio e em seguida mensagem; responda √† √∫ltima mensagem)\n\n${historico.join('\n')}\n${mensagemUsuarioAtual}`;
    
    // Obter resposta da IA
    let resposta = await this.gerarRespostaComTexto(textoHistorico, chatId);

    // Adicionar resposta √† transa√ß√£o
    await this.gerenciadorTransacoes.adicionarRespostaTransacao(transacao.id, resposta);
    
    // Enviar a resposta
    try {
      const enviado = await this.enviarResposta(msg, resposta, transacao.id);
      
      if (enviado) {
        // Marcar como entregue com sucesso
        await this.gerenciadorTransacoes.marcarComoEntregue(transacao.id);
      } else {
        // Mensagem foi colocada em fila
        this.registrador.info(`Resposta para transa√ß√£o ${transacao.id} colocada na fila de pendentes`);
      }
      
      return true;
    } catch (erroEnvio) {
      this.registrador.error(`Erro ao enviar mensagem: ${erroEnvio.message}`, { erro: erroEnvio });
      
      // Registrar falha na entrega
      await this.gerenciadorTransacoes.registrarFalhaEntrega(
        transacao.id, 
        `Erro ao enviar: ${erroEnvio.message}`
      );
      
      return false;
    }
  } catch (erro) {
    this.registrador.error(`Erro ao processar mensagem de texto: ${erro.message}`, { erro });
    return false;
  }
}
/**
 * Recupera uma transa√ß√£o interrompida
 * @param {Object} transacao - Transa√ß√£o a ser recuperada
 */
async recuperarTransacao(transacao) {
  try {
    this.registrador.info(`‚è±Ô∏è Recuperando transa√ß√£o ${transacao.id} ap√≥s reinicializa√ß√£o`);
    
    if (!transacao.dadosRecuperacao || !transacao.resposta) {
      this.registrador.warn(`Transa√ß√£o ${transacao.id} n√£o possui dados suficientes para recupera√ß√£o`);
      return false;
    }
    
    const { remetenteId, chatId } = transacao.dadosRecuperacao;
    
    if (!remetenteId || !chatId) {
      this.registrador.warn(`Dados insuficientes para recuperar transa√ß√£o ${transacao.id}`);
      return false;
    }
    
    // Enviar mensagem diretamente usando as informa√ß√µes persistidas
    await this.clienteWhatsApp.enviarMensagem(
      remetenteId, 
      transacao.resposta,
      { isRecoveredMessage: true }
    );
    
    // Marcar como entregue
    await this.gerenciadorTransacoes.marcarComoEntregue(transacao.id);
    
    this.registrador.info(`‚úÖ Transa√ß√£o ${transacao.id} recuperada e entregue com sucesso!`);
    return true;
  } catch (erro) {
    this.registrador.error(`Falha na recupera√ß√£o da transa√ß√£o ${transacao.id}: ${erro.message}`);
    return false;
  }
}


/**
 * Verifica se o bot foi mencionado na mensagem
 * @param {Object} msg - Mensagem do WhatsApp
 * @returns {Promise<boolean>} Verdadeiro se o bot foi mencionado
 */
async verificarMencaoBotNaMensagem(msg) {
  try {
    // Verificar men√ß√µes diretas (@Am√©lie)
    const mencoes = await msg.getMentions();
    if (mencoes && mencoes.length > 0) {
      const botWid = this.clienteWhatsApp.cliente.info.wid._serialized;
      return mencoes.some(mencao => mencao.id._serialized === botWid);
    }
    
    // Verificar por men√ß√£o no texto (como "Am√©lie")
    const BOT_NAME = process.env.BOT_NAME || 'Am√©lie';
    const regexNomeBot = new RegExp(`\\b${BOT_NAME}\\b`, 'i');
    if (regexNomeBot.test(msg.body)) {
      return true;
    }
    
    return false;
  } catch (erro) {
    this.registrador.error(`Erro ao verificar men√ß√£o do bot: ${erro.message}`);
    return false;
  }
}

  /**
   * Processa uma mensagem com m√≠dia
   * @param {Object} msg - Mensagem do WhatsApp
   * @param {string} chatId - ID do chat
   * @returns {Promise<boolean>} Sucesso do processamento
   */
  async processarMensagemComMidia(msg, chatId) {
    try {
      const dadosAnexo = await msg.downloadMedia();
      if (!dadosAnexo || !dadosAnexo.data) {
        this.registrador.error('N√£o foi poss√≠vel obter dados de m√≠dia.');
        return false;
      }
      
      // Inferir MIME type se n√£o estiver dispon√≠vel
      let mimeType = dadosAnexo.mimetype;
      if (!mimeType) {
        mimeType = this.inferirMimeType(Buffer.from(dadosAnexo.data, 'base64'));
        dadosAnexo.mimetype = mimeType;
        this.registrador.info(`MIME inferido: ${mimeType}`);
      }
      
      // Processar de acordo com o tipo de m√≠dia
      if (mimeType.startsWith('audio/')) {
        return await this.processarMensagemAudio(msg, dadosAnexo, chatId);
      } else if (mimeType.startsWith('image/')) {
        return await this.processarMensagemImagem(msg, dadosAnexo, chatId);
      } else if (mimeType.startsWith('video/')) {
        return await this.processarMensagemVideo(msg, dadosAnexo, chatId);
      } else {
        this.registrador.info(`Tipo de m√≠dia n√£o suportado: ${mimeType}`);
        return false;
      }
    } catch (erro) {
      this.registrador.error(`Erro ao processar m√≠dia: ${erro.message}`, { erro });
      await msg.reply('Desculpe, ocorreu um erro ao processar sua m√≠dia.');
      return false;
    }
  }

  /**
   * Infere o MIME type de um buffer de dados
   * @param {Buffer} buffer - Buffer de dados
   * @returns {string} MIME type inferido
   */
  inferirMimeType(buffer) {
    if (!buffer || buffer.length < 12) {
      return 'application/octet-stream';
    }
    
    const bytesHex = buffer.slice(0, 12).toString('hex').toLowerCase();
    
    // Tipos de imagem
    if (bytesHex.startsWith('89504e47')) return 'image/png';
    if (bytesHex.startsWith('ffd8ff')) return 'image/jpeg';
    if (bytesHex.startsWith('47494638')) return 'image/gif';
    if (bytesHex.startsWith('424d')) return 'image/bmp';
    if (bytesHex.startsWith('52494646') && bytesHex.includes('57454250')) return 'image/webp';
    
    // Tipos de √°udio
    if (bytesHex.startsWith('4944330') || bytesHex.startsWith('fffb')) return 'audio/mpeg';
    if (bytesHex.startsWith('52494646') && bytesHex.includes('57415645')) return 'audio/wav';
    if (bytesHex.startsWith('4f676753')) return 'audio/ogg';
    
    // Tipos de v√≠deo
    if (bytesHex.includes('66747970')) return 'video/mp4';
    if (bytesHex.startsWith('1a45dfa3')) return 'video/webm';
    if (bytesHex.startsWith('52494646') && bytesHex.includes('41564920')) return 'video/avi';
    if (bytesHex.startsWith('3026b275')) return 'video/x-ms-wmv';
    
    return 'application/octet-stream';
  }

  /**
   * Processa uma mensagem com √°udio
   * @param {Object} msg - Mensagem do WhatsApp
   * @param {Object} audioData - Dados do √°udio
   * @param {string} chatId - ID do chat
   * @returns {Promise<boolean>} Sucesso do processamento
   */
  async processarMensagemAudio(msg, audioData, chatId) {
    try {
      const chat = await msg.getChat();
      const config = await this.gerenciadorConfig.obterConfig(chatId);
      const remetente = await this.obterOuCriarUsuario(msg.author || msg.from, chat);
      
      if (!config.mediaAudio) {
        return false;
      }
      
      const tamanhoAudioMB = audioData.data.length / (1024 * 1024);
      if (tamanhoAudioMB > 20) {
        await msg.reply('Desculpe, s√≥ posso processar √°udios de at√© 20MB.');
        return false;
      }
      
      const ehPTT = audioData.mimetype === 'audio/ogg; codecs=opus';
      this.registrador.debug(`Processando arquivo de √°udio: ${ehPTT ? 'PTT' : '√Åudio regular'}`);
      
      const hashAudio = crypto.createHash('md5').update(audioData.data).digest('hex');
      if (this.ultimoAudioProcessado === hashAudio) {
        await msg.reply('Este √°udio j√° foi processado recentemente. Por favor, envie um novo √°udio.');
        return false;
      }
      this.ultimoAudioProcessado = hashAudio;
      
      // Criar transa√ß√£o para esta mensagem
      const transacao = await this.gerenciadorTransacoes.criarTransacao(msg, chat);
      this.registrador.info(`Nova transa√ß√£o criada: ${transacao.id} para mensagem de √°udio`);
      
      // Marcar como processando
      await this.gerenciadorTransacoes.marcarComoProcessando(transacao.id);
      
      // Processar o √°udio com a IA
      const resultado = await this.gerenciadorAI.processarAudio(audioData, hashAudio, config);
      
      // Adicionar resposta √† transa√ß√£o
      await this.gerenciadorTransacoes.adicionarRespostaTransacao(transacao.id, resultado);
      
      try {
        const enviado = await this.enviarResposta(msg, resultado);
        
        if (enviado) {
          await this.gerenciadorTransacoes.marcarComoEntregue(transacao.id);
        }
        
        return true;
      } catch (erroEnvio) {
        this.registrador.error(`Erro ao enviar resposta de √°udio: ${erroEnvio.message}`, { erro: erroEnvio });
        await this.gerenciadorTransacoes.registrarFalhaEntrega(transacao.id, `Erro ao enviar: ${erroEnvio.message}`);
        return false;
      }
    } catch (erro) {
      this.registrador.error(`Erro ao processar mensagem de √°udio: ${erro.message}`, { erro });
      await msg.reply('Desculpe, ocorreu um erro ao processar o √°udio. Por favor, tente novamente.');
      return false;
    }
  }

  /**
   * Processa uma mensagem com imagem usando a fila de processamento desacoplada
   * @param {Object} msg - Mensagem do WhatsApp
   * @param {Object} imagemData - Dados da imagem
   * @param {string} chatId - ID do chat
   * @returns {Promise<boolean>} Sucesso do processamento
   */
  async processarMensagemImagem(msg, imagemData, chatId) {
    try {
      const chat = await msg.getChat();
      const config = await this.gerenciadorConfig.obterConfig(chatId);
      const remetente = await this.obterOuCriarUsuario(msg.author || msg.from, chat);
      
      if (!config.mediaImage) {
        this.registrador.info(`Descri√ß√£o de imagem desabilitada para o chat ${chatId}. Ignorando mensagem de imagem.`);
        return false;
      }
      
      // Criar transa√ß√£o para esta mensagem de imagem
      const transacao = await this.gerenciadorTransacoes.criarTransacao(msg, chat);
      this.registrador.info(`Nova transa√ß√£o criada: ${transacao.id} para mensagem de imagem de ${remetente.name}`);
      
      // Marcar transa√ß√£o como processando
      await this.gerenciadorTransacoes.marcarComoProcessando(transacao.id);
      
      // Determinar o prompt do usu√°rio
      let promptUsuario = "";
      
      if (msg.body && msg.body.trim() !== '') {
        promptUsuario = msg.body.trim();
      }
      
      await this.filaProcessamentoImagem.add('process-image', {
        imageData: imagemData, 
        chatId, 
        messageId: msg.id._serialized,
        mimeType: imagemData.mimetype,
        userPrompt: promptUsuario,
        senderNumber: msg.from,
        transacaoId: transacao.id,
        remetenteName: remetente.name,
        modoDescricao: config.modoDescricao || 'curto' // Adicionado com padr√£o 'curto'
      }, { 
        removeOnComplete: true,
        removeOnFail: false,
        timeout: 60000 // 1 minuto
      });
      
      this.registrador.info(`üöÄ Imagem de ${remetente.name} adicionada √† fila com sucesso (transa√ß√£o ${transacao.id})`);
      return true;
      
    } catch (erro) {
      this.registrador.error(`Erro ao processar mensagem de imagem: ${erro.message}`, { erro });
      
      // Verificar se √© um erro de seguran√ßa
      if (erro.message.includes('SAFETY') || erro.message.includes('safety') || 
          erro.message.includes('blocked') || erro.message.includes('Blocked')) {
        
        // Salvar a imagem para an√°lise posterior
        try {
          const diretorioBlocked = path.join(process.cwd(), 'blocked');
          if (!fs.existsSync(diretorioBlocked)) {
            fs.mkdirSync(diretorioBlocked, { recursive: true });
          }
          
          // Salvar a imagem
          const dataHora = new Date().toISOString().replace(/[:.-]/g, '_');
          const remetente = msg.from || 'unknown';
          const caminhoImagem = path.join(diretorioBlocked, `blocked_image_${remetente}_${dataHora}.jpg`);
          
          const buffer = Buffer.from(imagemData.data, 'base64');
          fs.writeFileSync(caminhoImagem, buffer);
          
          // Salvar metadados
          const metadados = {
            timestamp: new Date().toISOString(),
            tipoArquivo: imagemData.mimetype || 'image/unknown',
            erro: erro.message,
            remetente: {
              id: msg.from || 'desconhecido',
              author: msg.author || msg.from || 'desconhecido'
            },
            grupo: chatId.endsWith('@g.us') ? {
              id: chatId
            } : null,
            mensagem: {
              id: msg.id._serialized || 'desconhecido',
              prompt: msg.body || '',
            }
          };
          
          const caminhoMetadados = path.join(diretorioBlocked, `blocked_image_${remetente}_${dataHora}.json`);
          fs.writeFileSync(caminhoMetadados, JSON.stringify(metadados, null, 2), 'utf8');
          
          this.registrador.warn(`‚ö†Ô∏è Imagem bloqueada por seguran√ßa salva em: ${caminhoImagem}`);
        } catch (erroSave) {
          this.registrador.error(`Erro ao salvar imagem bloqueada: ${erroSave.message}`);
        }
        
        await msg.reply('Este conte√∫do n√£o p√¥de ser processado por quest√µes de seguran√ßa.');
      } else {
        await msg.reply('Desculpe, ocorreu um erro ao processar a imagem. Por favor, tente novamente.');
      }
      
      return false;
    }
  }

  /**
   * Processa uma mensagem com v√≠deo de forma ass√≠ncrona
   * @param {Object} msg - Mensagem do WhatsApp
   * @param {Object} videoData - Dados do v√≠deo
   * @param {string} chatId - ID do chat
   * @returns {Promise<boolean>} Sucesso do processamento
   */
  async processarMensagemVideo(msg, videoData, chatId) {
    try {
      const chat = await msg.getChat();
      const config = await this.gerenciadorConfig.obterConfig(chatId);
      const remetente = await this.obterOuCriarUsuario(msg.author || msg.from, chat);
      
      if (!config.mediaVideo) {
        this.registrador.info(`Descri√ß√£o de v√≠deo desabilitada para o chat ${chatId}. Ignorando mensagem de v√≠deo.`);
        return false;
      }
      
      // Criar transa√ß√£o para esta mensagem de v√≠deo
      const transacao = await this.gerenciadorTransacoes.criarTransacao(msg, chat);
      this.registrador.info(`Nova transa√ß√£o criada: ${transacao.id} para mensagem de v√≠deo de ${remetente.name}`);
      
      // Enviar feedback inicial e continuar processamento
      // await msg.reply("‚ú® Estou colocando seu v√≠deo na fila de processamento! Voc√™ receber√° o resultado em breve...");
      
      // Marcar transa√ß√£o como processando
      await this.gerenciadorTransacoes.marcarComoProcessando(transacao.id);
      
      // Determinar o prompt do usu√°rio
      let promptUsuario = `Analise este v√≠deo de forma extremamente detalhada para pessoas com defici√™ncia visual.
Inclua:
1. N√∫mero exato de pessoas, suas posi√ß√µes e roupas (cores, tipos)
2. Ambiente e cen√°rio completo
3. Todos os objetos vis√≠veis 
4. Movimentos e a√ß√µes detalhadas
5. Express√µes faciais
6. Textos vis√≠veis
7. Qualquer outro detalhe relevante

Crie uma descri√ß√£o organizada e acess√≠vel.`;
      
      if (msg.body && msg.body.trim() !== '') {
        promptUsuario = msg.body.trim();
      }
      
      // Cria um arquivo tempor√°rio para o v√≠deo
      const dataHora = new Date().toISOString().replace(/[:.]/g, '-');
      const arquivoTemporario = `./temp/video_${dataHora}_${Math.floor(Math.random() * 10000)}.mp4`;
      const trabalhoId = `video_${chatId}_${Date.now()}`;
      
      try {
        this.registrador.info(`Salvando arquivo de v√≠deo ${arquivoTemporario}...`);
        const videoBuffer = Buffer.from(videoData.data, 'base64');
        
        await fs.promises.writeFile(arquivoTemporario, videoBuffer);
        this.registrador.info(`‚úÖ Arquivo de v√≠deo salvo com sucesso: ${arquivoTemporario} (${Math.round(videoBuffer.length / 1024)} KB)`);
        
        const stats = await fs.promises.stat(arquivoTemporario);
        if (stats.size !== videoBuffer.length) {
          throw new Error(`Tamanho do arquivo salvo (${stats.size}) n√£o corresponde ao buffer original (${videoBuffer.length})`);
        }
        
        // Adicionar √† fila de processamento
        await this.filaProcessamento.add('process-video', {
          tempFilename: arquivoTemporario,
          chatId,
          messageId: msg.id._serialized,
          mimeType: videoData.mimetype,
          userPrompt: promptUsuario,
          senderNumber: msg.from,
          transacaoId: transacao.id,
          remetenteName: remetente.name,
          modoDescricao: config.modoDescricao || 'curto' // Adicionado com padr√£o 'curto'
        }, { 
          jobId: trabalhoId,
          removeOnComplete: true,
          removeOnFail: false,
          timeout: 300000 // 5 minutos
        });
        
        this.registrador.debug(`üöÄ V√≠deo de ${remetente.name} adicionado √† fila com sucesso: ${arquivoTemporario} (Job ${trabalhoId})`);
        return true;
        
      } catch (erroProcessamento) {
        this.registrador.error(`‚ùå Erro ao processar v√≠deo: ${erroProcessamento.message}`);
        
        // Tentar notificar o usu√°rio sobre o erro
        await msg.reply("Ai, tive um probleminha com seu v√≠deo. Poderia tentar novamente?").catch(() => {});
        
        // Registrar falha na transa√ß√£o
        await this.gerenciadorTransacoes.registrarFalhaEntrega(transacao.id, `Erro no processamento: ${erroProcessamento.message}`);
        
        // Limpar arquivo se existir
        if (fs.existsSync(arquivoTemporario)) {
          await fs.promises.unlink(arquivoTemporario).catch(err => {
            this.registrador.error(`Erro ao remover arquivo tempor√°rio: ${err.message}`);
          });
          this.registrador.info(`Arquivo tempor√°rio ${arquivoTemporario} removido ap√≥s erro`);
        }
        
        return false;
      }
    } catch (erro) {
      this.registrador.error(`Erro ao processar mensagem de v√≠deo: ${erro.message}`, { erro });
      
      let mensagemAmigavel = 'Desculpe, ocorreu um erro ao adicionar seu v√≠deo √† fila de processamento.';
      
      if (erro.message.includes('too large')) {
        mensagemAmigavel = 'Ops! Este v√≠deo parece ser muito grande para eu processar. Poderia enviar uma vers√£o menor ou comprimida?';
      } else if (erro.message.includes('format')) {
        mensagemAmigavel = 'Esse formato de v√≠deo est√° me dando trabalho! Poderia tentar enviar em outro formato?';
      } else if (erro.message.includes('timeout')) {
        mensagemAmigavel = 'O processamento demorou mais que o esperado. Talvez o v√≠deo seja muito complexo?';
      }
      
      await msg.reply(mensagemAmigavel).catch(erroResposta => {
        this.registrador.error(`N√£o consegui enviar mensagem de erro: ${erroResposta.message}`);
      });
      
      return false;
    }
  }

  /**
   * Obt√©m ou cria um registro de usu√°rio
   * @param {string} remetente - ID do remetente
   * @param {Object} chat - Objeto do chat
   * @returns {Promise<Object>} Informa√ß√µes do usu√°rio
   */
  async obterOuCriarUsuario(remetente, chat) {
    try {
      // Se temos gerenciadorConfig, usar o m√©todo dele
      if (this.gerenciadorConfig) {
        return await this.gerenciadorConfig.obterOuCriarUsuario(remetente, this.clienteWhatsApp.cliente);
      }

// Implementa√ß√£o alternativa caso o gerenciadorConfig n√£o esteja dispon√≠vel
const contato = await this.clienteWhatsApp.cliente.getContactById(remetente);
      
let nome = contato.pushname || contato.name || contato.shortName;

if (!nome || nome.trim() === '') {
  const idSufixo = remetente.substring(0, 6);
  nome = `User${idSufixo}`;
}

return {
  id: remetente,
  name: nome,
  joinedAt: new Date()
};
} catch (erro) {
this.registrador.error(`Erro ao obter informa√ß√µes do usu√°rio: ${erro.message}`);
const idSufixo = remetente.substring(0, 6);
return {
  id: remetente,
  name: `User${idSufixo}`,
  joinedAt: new Date()
};
}
}

/**
* Envia uma resposta √† mensagem original
* @param {Object} mensagemOriginal - Mensagem original para responder
* @param {string} texto - Texto da resposta
* @returns {Promise<boolean>} Sucesso do envio
*/
async enviarResposta(mensagemOriginal, texto, transacaoId = null) {
  try {
    if (!texto || typeof texto !== 'string' || texto.trim() === '') {
      this.registrador.error('Tentativa de enviar mensagem inv√°lida:', { texto });
      texto = "Desculpe, ocorreu um erro ao gerar a resposta. Por favor, tente novamente.";
    }

    // Verifica√ß√£o de seguran√ßa para casos onde a mensagem original n√£o √© mais v√°lida
    if (!mensagemOriginal || typeof mensagemOriginal.getChat !== 'function') {
      this.registrador.warn(`Mensagem original inv√°lida ou inacess√≠vel, tentando recupera√ß√£o alternativa`);
      
      // Se temos transacaoId, tentamos recuperar dados de l√°
      if (transacaoId) {
        const transacao = await this.gerenciadorTransacoes.obterTransacao(transacaoId);
        if (transacao && transacao.dadosRecuperacao && transacao.dadosRecuperacao.remetenteId) {
          this.registrador.info(`Recuperando envio via dados da transa√ß√£o ${transacaoId}`);
          return await this.clienteWhatsApp.enviarMensagem(transacao.dadosRecuperacao.remetenteId, texto);
        }
      }
      
      // Alternativa: tenta usar campos dispon√≠veis na mensagem original
      if (mensagemOriginal && mensagemOriginal.from) {
        return await this.clienteWhatsApp.enviarMensagem(mensagemOriginal.from, texto);
      }
      
      this.registrador.error(`Imposs√≠vel enviar mensagem - refer√™ncias quebradas e sem transa√ß√£o recuper√°vel`);
      return false;
    }

    // Restante da fun√ß√£o como antes...
    let textoReduzido = texto.trim();
    textoReduzido = textoReduzido.replace(/^(?:am√©lie:[\s]*)+/i, '');
    textoReduzido = textoReduzido.replace(/^(?:amelie:[\s]*)+/i, '');
    textoReduzido = textoReduzido.replace(/\r\n/g, '\n').replace(/\r/g, '\n').replace(/\n{3,}/g, '\n\n');

    // Obter informa√ß√µes do remetente e do chat
    const chat = await mensagemOriginal.getChat();
    const ehGrupo = chat.id._serialized.endsWith('@g.us');
    const remetente = await this.obterOuCriarUsuario(mensagemOriginal.author || mensagemOriginal.from);
    const nomeRemetente = remetente.name;

    // Preparar o texto de log
    let prefixoLog = `\nMensagem de ${nomeRemetente}`;

    // Adicionar informa√ß√£o do grupo, se aplic√°vel
    if (ehGrupo) {
      prefixoLog += ` no grupo "${chat.name || 'Desconhecido'}"`;
    }

    // Obter o corpo da mensagem original
    const mensagemOriginalTexto = mensagemOriginal.body || "[M√≠dia sem texto]";

    // Log no formato solicitado
    this.registrador.debug(`${prefixoLog}: ${mensagemOriginalTexto}\nResposta: ${textoReduzido}`);

    // Enviar a mensagem usando o m√©todo atualizado do ClienteWhatsApp
    const chatId = chat.id._serialized;
    const enviado = await this.clienteWhatsApp.enviarMensagem(chatId, textoReduzido, mensagemOriginal);

    // Se n√£o foi enviado mas tamb√©m n√£o lan√ßou erro, √© porque foi enfileirado
    if (!enviado) {
      this.registrador.info(`Mensagem para ${chatId} colocada na fila de pendentes`);
    }

    return enviado;
  } catch (erro) {
    this.registrador.error('Erro ao enviar resposta:', { 
      erro: erro.message,
      stack: erro.stack,
      texto: texto
    });

    // Tentar salvar como notifica√ß√£o pendente
    try {
      // Se temos transacaoId, usamos os dados da transa√ß√£o
      if (transacaoId) {
        const transacao = await this.gerenciadorTransacoes.obterTransacao(transacaoId);
        if (transacao && transacao.dadosRecuperacao && transacao.dadosRecuperacao.remetenteId) {
          await this.clienteWhatsApp.salvarNotificacaoPendente(
            transacao.dadosRecuperacao.remetenteId, 
            texto, 
            { transacaoId }
          );
          this.registrador.info(`Mensagem salva como notifica√ß√£o pendente via transa√ß√£o ${transacaoId}`);
          return false;
        }
      }

      // Tentar via mensagem original como fallback
      if (mensagemOriginal && mensagemOriginal.chat) {
        const chatId = mensagemOriginal.chat.id._serialized;
        await this.clienteWhatsApp.salvarNotificacaoPendente(chatId, texto, mensagemOriginal);
        this.registrador.info(`Mensagem salva como notifica√ß√£o pendente para ${chatId}`);
      } else {
        this.registrador.error(`N√£o foi poss√≠vel salvar notifica√ß√£o pendente - dados insuficientes`);
      }
    } catch (erroSalvar) {
      this.registrador.error(`Falha ao salvar notifica√ß√£o pendente: ${erroSalvar.message}`);
    }

    return false;
  }
}

/**
* Gera resposta baseada em texto e imagem
* @param {string} promptUsuario - Prompt do usu√°rio
* @param {Object} imagemData - Dados da imagem
* @param {string} chatId - ID do chat
* @returns {Promise<string>} Resposta gerada
*/
async gerarRespostaComTextoEImagem(promptUsuario, imagemData, chatId) {
try {
const configUsuario = await this.gerenciadorConfig.obterConfig(chatId);

const parteImagem = {
  inlineData: {
    data: imagemData.data.toString('base64'),
    mimeType: imagemData.mimetype
  }
};

const partesConteudo = [
  parteImagem,
  { text: promptUsuario }
];

const modelo = this.gerenciadorAI.obterOuCriarModelo({
  model: "gemini-2.0-flash",
  temperature: configUsuario.temperature,
  topK: configUsuario.topK,
  topP: configUsuario.topP,
  maxOutputTokens: configUsuario.maxOutputTokens,
  systemInstruction: configUsuario.systemInstructions
});

// Adicionar timeout de 45 segundos
const promessaResultado = modelo.generateContent(partesConteudo);
const promessaTimeout = new Promise((_, reject) => 
  setTimeout(() => reject(new Error("Timeout da API Gemini")), 45000)
);

const resultado = await Promise.race([promessaResultado, promessaTimeout]);
let textoResposta = resultado.response.text();

if (!textoResposta) {
  throw new Error('Resposta vazia gerada pelo modelo');
}

textoResposta = this.removerEmojis(textoResposta);

return textoResposta;
} catch (erro) {
this.registrador.error(`Erro ao gerar resposta com texto e imagem: ${erro.message}`);
return "Desculpe, ocorreu um erro ao gerar a resposta para a imagem. Por favor, tente novamente ou reformule sua pergunta.";
}
}

/**
* Gera resposta baseada apenas em texto
* @param {string} promptUsuario - Prompt do usu√°rio
* @param {string} chatId - ID do chat
* @returns {Promise<string>} Resposta gerada
*/
async gerarRespostaComTexto(promptUsuario, chatId) {
try {
const configUsuario = await this.gerenciadorConfig.obterConfig(chatId);

// Usar o gerenciadorAI para processar o texto
return await this.gerenciadorAI.processarTexto(promptUsuario, configUsuario);
} catch (erro) {
this.registrador.error(`Erro ao gerar resposta de texto: ${erro.message}`);
return "Desculpe, ocorreu um erro ao gerar a resposta. Por favor, tente novamente ou reformule sua pergunta.";
}
}

/**
* Processa comandos relacionados a prompts
* @param {Object} msg - Mensagem recebida
* @param {Array} args - Argumentos do comando
* @param {string} chatId - ID do chat
* @async
*/
async tratarComandoPrompt(msg, args, chatId) {
const [subcomando, nome, ...resto] = args;

switch (subcomando) {
case 'set':
  if (nome && resto.length > 0) {
    const textoPrompt = resto.join(' ');
    await this.gerenciadorConfig.definirPromptSistema(chatId, nome, textoPrompt);
    await msg.reply(`System Instruction "${nome}" definida com sucesso.`);
  } else {
    await msg.reply('Uso correto: .prompt set <nome> <texto>');
  }
  break;
  
case 'get':
  if (nome) {
    const prompt = await this.gerenciadorConfig.obterPromptSistema(chatId, nome);
    if (prompt) {
      await msg.reply(`System Instruction "${nome}":\n${prompt.text}`);
    } else {
      await msg.reply(`System Instruction "${nome}" n√£o encontrada.`);
    }
  } else {
    await msg.reply('Uso correto: .prompt get <nome>');
  }
  break;
  
case 'list':
  const prompts = await this.gerenciadorConfig.listarPromptsSistema(chatId);
  if (prompts.length > 0) {
    const listaPrompts = prompts.map(p => p.name).join(', ');
    await msg.reply(`System Instructions dispon√≠veis: ${listaPrompts}`);
  } else {
    await msg.reply('Nenhuma System Instruction definida.');
  }
  break;
  
case 'use':
  if (nome) {
    const prompt = await this.gerenciadorConfig.obterPromptSistema(chatId, nome);
    if (prompt) {
      await this.gerenciadorConfig.definirPromptSistemaAtivo(chatId, nome);
      await msg.reply(`System Instruction "${nome}" ativada para este chat.`);
    } else {
      await msg.reply(`System Instruction "${nome}" n√£o encontrada.`);
    }
  } else {
    await msg.reply('Uso correto: .prompt use <nome>');
  }
  break;
  
case 'clear':
  await this.gerenciadorConfig.limparPromptSistemaAtivo(chatId);
  await msg.reply('System Instruction removida. Usando o modelo padr√£o.');
  break;
  
case 'delete':
  if (nome) {
    // Verificar se o prompt existe antes de tentar excluir
    const promptExiste = await this.gerenciadorConfig.obterPromptSistema(chatId, nome);
    if (promptExiste) {
      // Verificar se o prompt est√° ativo
      const config = await this.gerenciadorConfig.obterConfig(chatId);
      const estaAtivo = config.activePrompt === nome;
      
      // Excluir o prompt
      const sucesso = await this.gerenciadorConfig.excluirPromptSistema(chatId, nome);
      
      if (sucesso) {
        // Se o prompt exclu√≠do estava ativo, desativ√°-lo
        if (estaAtivo) {
          await this.gerenciadorConfig.limparPromptSistemaAtivo(chatId);
        }
        await msg.reply(`System Instruction "${nome}" exclu√≠da com sucesso.`);
      } else {
        await msg.reply(`Erro ao excluir System Instruction "${nome}".`);
      }
    } else {
      await msg.reply(`System Instruction "${nome}" n√£o encontrada.`);
    }
  } else {
    await msg.reply('Uso correto: .prompt delete <nome>');
  }
  break;
  
default:
  await msg.reply('Subcomando de prompt desconhecido. Use .ajuda para ver os comandos dispon√≠veis.');
}
}

/**
* Processa comandos relacionados a configura√ß√µes
* @param {Object} msg - Mensagem recebida
* @param {Array} args - Argumentos do comando
* @param {string} chatId - ID do chat
* @async
*/
async tratarComandoConfig(msg, args, chatId) {
const [subcomando, param, valor] = args;

switch (subcomando) {
case 'set':
  if (param && valor) {
    if (['temperature', 'topK', 'topP', 'maxOutputTokens', 'mediaImage', 'mediaAudio', 'mediaVideo'].includes(param)) {
      const valorNum = (param.startsWith('media')) ? (valor === 'true') : parseFloat(valor);
      if (!isNaN(valorNum) || typeof valorNum === 'boolean') {
        await this.gerenciadorConfig.definirConfig(chatId, param, valorNum);
        await msg.reply(`Par√¢metro ${param} definido como ${valorNum}`);
      } else {
        await msg.reply(`Valor inv√°lido para ${param}. Use um n√∫mero ou "true"/"false" se for m√≠dia.`);
      }
    } else {
      await msg.reply(`Par√¢metro desconhecido: ${param}`);
    }
  } else {
    await msg.reply('Uso correto: !config set <param> <valor>');
  }
  break;
  
case 'get':
  const config = await this.gerenciadorConfig.obterConfig(chatId);
  if (param) {
    if (config.hasOwnProperty(param)) {
      await msg.reply(`${param}: ${config[param]}`);
    } else {
      await msg.reply(`Par√¢metro desconhecido: ${param}`);
    }
  } else {
    const textoConfig = Object.entries(config)
      .map(([chave, valor]) => `${chave}: ${valor}`)
      .join('\n');
    await msg.reply(`Configura√ß√£o atual:\n${textoConfig}`);
  }
  break;
  
default:
  await msg.reply('Subcomando de config desconhecido. Use .ajuda para ver os comandos dispon√≠veis.');
}
}

/**
 * Configura o modo de descri√ß√£o longa para imagens e v√≠deos
 * @param {Object} msg - Mensagem recebida
 * @param {string} chatId - ID do chat
 * @async
 */
async tratarComandoLongo(msg, chatId) {
  try {
    const BOT_NAME = process.env.BOT_NAME || 'Am√©lie';
    
    // Configurar explicitamente para usar descri√ß√£o longa
    await this.gerenciadorConfig.definirConfig(chatId, 'mediaImage', true);
    await this.gerenciadorConfig.definirConfig(chatId, 'mediaVideo', true);
    await this.gerenciadorConfig.definirConfig(chatId, 'modoDescricao', 'longo');
    
    // For√ßar a atualiza√ß√£o do banco de dados
    await this.gerenciadorConfig.definirConfig(chatId, 'descricaoLonga', true);
    await this.gerenciadorConfig.definirConfig(chatId, 'descricaoCurta', false);
    
    // Logs para depura√ß√£o
    this.registrador.info(`Modo longo ativado para ${chatId}, verificando configura√ß√£o...`);
    const configAtualizada = await this.gerenciadorConfig.obterConfig(chatId);
    this.registrador.info(`Modo de descri√ß√£o atual: ${configAtualizada.modoDescricao}`);
    
    await msg.reply('Modo de descri√ß√£o longa e detalhada ativado para imagens e v√≠deos. Toda m√≠dia visual ser√° descrita com o m√°ximo de detalhes poss√≠vel.');
    
    this.registrador.info(`Modo de descri√ß√£o longa ativado para o chat ${chatId}`);
    return true;
  } catch (erro) {
    this.registrador.error(`Erro ao aplicar modo de descri√ß√£o longa: ${erro.message}`, { erro });
    await msg.reply('Desculpe, ocorreu um erro ao configurar o modo de descri√ß√£o longa. Por favor, tente novamente.');
    return false;
  }
}

/**
 * Configura o modo de descri√ß√£o curta para imagens e v√≠deos
 * @param {Object} msg - Mensagem recebida
 * @param {string} chatId - ID do chat
 * @async
 */
async tratarComandoCurto(msg, chatId) {
  try {
    const BOT_NAME = process.env.BOT_NAME || 'Am√©lie';
    
    // Configurar explicitamente para usar descri√ß√£o curta
    await this.gerenciadorConfig.definirConfig(chatId, 'mediaImage', true);
    await this.gerenciadorConfig.definirConfig(chatId, 'mediaVideo', true);
    await this.gerenciadorConfig.definirConfig(chatId, 'modoDescricao', 'curto');
    
    // For√ßar a atualiza√ß√£o do banco de dados
    await this.gerenciadorConfig.definirConfig(chatId, 'descricaoLonga', false);
    await this.gerenciadorConfig.definirConfig(chatId, 'descricaoCurta', true);
    
    // Logs para depura√ß√£o
    this.registrador.info(`Modo curto ativado para ${chatId}, verificando configura√ß√£o...`);
    const configAtualizada = await this.gerenciadorConfig.obterConfig(chatId);
    this.registrador.info(`Modo de descri√ß√£o atual: ${configAtualizada.modoDescricao}`);
    
    await msg.reply('Modo de descri√ß√£o curta e concisa ativado para imagens e v√≠deos. Toda m√≠dia visual ser√° descrita de forma breve e objetiva, limitado a cerca de 200 caracteres.');
    
    this.registrador.info(`Modo de descri√ß√£o curta ativado para o chat ${chatId}`);
    return true;
  } catch (erro) {
    this.registrador.error(`Erro ao aplicar modo de descri√ß√£o curta: ${erro.message}`, { erro });
    await msg.reply('Desculpe, ocorreu um erro ao configurar o modo de descri√ß√£o curta. Por favor, tente novamente.');
    return false;
  }
}

/**
* Lista os usu√°rios de um grupo
* @param {Object} msg - Mensagem recebida
* @param {string} chatId - ID do chat (opcional)
* @async
*/
async listarUsuariosGrupo(msg, chatId) {
try {
const chat = await msg.getChat();
if (chat.isGroup) {
  const grupo = await this.gerenciadorConfig.obterOuCriarGrupo(chat);
  
  const participantes = await chat.participants;
  const listaUsuarios = await Promise.all(participantes.map(async (p) => {
    const usuario = await this.obterOuCriarUsuario(p.id._serialized, chat);
    return `${usuario.name} (${p.id.user})`;
  }));
  
  await msg.reply(`Usu√°rios no grupo "${grupo.title}":\n${listaUsuarios.join('\n')}`);
} else {
  await msg.reply('Este comando s√≥ funciona em grupos.');
}
} catch (erro) {
this.registrador.error(`Erro ao listar usu√°rios do grupo: ${erro.message}`);
await msg.reply('Desculpe, ocorreu um erro ao listar os usu√°rios do grupo.');
}
}
}

module.exports = GerenciadorMensagens;
